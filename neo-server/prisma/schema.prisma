generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  password String?

  name    String  @default("not name")
 picture String  @default("/uploads/no-user-image.png")
  stores   Store[]

  favorites Product[]
  reviews   Review[]
  orders    Order[]

  @@map("user")
}

model Store {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  products   Product[]
  categories Category[]
  colors     Color[]
  reviews    Review[]
  orderItems OrderItem[]

  @@map("store")
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?
  price       Int
  images      String[]

  reviews Review[]
  orderItems OrderItem[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")

  color   Color?  @relation(fields: [colorId], references: [id])
  colorId String? @map("color_id")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("userId")

  @@map("products")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?

  products Product[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("category")
}

model Color {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String
  value String?

  products Product[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("color")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  text   String
  rating Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("review")
}

model Order {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      OrderStatus @default(PENDING)
  total       Float
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")
  items       OrderItem[]
  paymentId   String? 
  paymentData Json? 

  
  customerName     String?
  customerEmail    String?
  customerPhone    String?
  shippingAddress  String?

  @@map("orders")
}



model OrderItem {
  id       String  @id @default(uuid())
  quantity Int
  price    Float
  order    Order?  @relation(fields: [orderId], references: [id])
  orderId  String? @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}
